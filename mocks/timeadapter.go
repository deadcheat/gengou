// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/deadcheat/gengou (interfaces: TimeAdapter)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockTimeAdapter is a mock of TimeAdapter interface
type MockTimeAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockTimeAdapterMockRecorder
}

// MockTimeAdapterMockRecorder is the mock recorder for MockTimeAdapter
type MockTimeAdapterMockRecorder struct {
	mock *MockTimeAdapter
}

// NewMockTimeAdapter creates a new mock instance
func NewMockTimeAdapter(ctrl *gomock.Controller) *MockTimeAdapter {
	mock := &MockTimeAdapter{ctrl: ctrl}
	mock.recorder = &MockTimeAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTimeAdapter) EXPECT() *MockTimeAdapterMockRecorder {
	return m.recorder
}

// LoadLocation mocks base method
func (m *MockTimeAdapter) LoadLocation(arg0 string) (*time.Location, error) {
	ret := m.ctrl.Call(m, "LoadLocation", arg0)
	ret0, _ := ret[0].(*time.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadLocation indicates an expected call of LoadLocation
func (mr *MockTimeAdapterMockRecorder) LoadLocation(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadLocation", reflect.TypeOf((*MockTimeAdapter)(nil).LoadLocation), arg0)
}
